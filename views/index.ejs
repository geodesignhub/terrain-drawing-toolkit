<!DOCTYPE html>
<html lang="en">

<head>
    <title>Geodesignhub Terrain Toolkit</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">

    <!-- <link rel="stylesheet" href="/assets/js/humane/flatty.css"> -->
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);
    </style>
</head>

<body>
    <div class="container-sm">
                <div id="cesiumContainer"></div>           

    </div>

    <script src="/assets/js/jquery/jquery-3.6.0.slim.min.js"></script>
    <script src="/assets/js/bootstrap/bootstrap.bundle.min.js"></script>
    <!-- <script type="text/javascript" src="/assets/js/humane/humane.min.js"> -->
    </script>
    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <script>
        var viewer = new Cesium.Viewer("cesiumContainer", {
            selectionIndicator: false,
            infoBox: false,
            baseLayerPicker : false,
            animation: false,
            navigationHelpButton : false, 
            fullscreenButton : false,
            geocoder :false,
            homeButton : false,
            timeline: false,
            terrainProvider: Cesium.createWorldTerrain({
                requestVertexNormals: true
            }),
        });
        viewer.scene.globe.enableLighting = true;
        // const osmBuildings = viewer.scene.primitives.add(Cesium.createOsmBuildings());
        if (!viewer.scene.pickPositionSupported) {
            window.alert("This browser does not support pickPosition.");
        }

        viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(
            Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK
        );

        function createPoint(worldPosition) {
            var point = viewer.entities.add({
                position: worldPosition,
                point: {
                    color: Cesium.Color.RED,
                    pixelSize: 5,
                    heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                },
            });
            return point;
        }
        var drawingMode = "line";

        function drawShape(positionData) {
            var shape;
            if (drawingMode === "line") {
                shape = viewer.entities.add({
                    polyline: {
                        positions: positionData,
                        clampToGround: true,
                        width: 3,
                    },
                });
            } else if (drawingMode === "polygon") {
                shape = viewer.entities.add({
                    polygon: {
                        hierarchy: positionData,
                        material: new Cesium.ColorMaterialProperty(
                            Cesium.Color.RED.withAlpha(0.7)
                        ),
                    },
                });
            }
            return shape;
        }
        var activeShapePoints = [];
        var activeShape;
        var floatingPoint;
        var handler = new Cesium.ScreenSpaceEventHandler(viewer.canvas);
        handler.setInputAction(function (event) {
            // We use `viewer.scene.pickPosition` here instead of `viewer.camera.pickEllipsoid` so that
            // we get the correct point when mousing over terrain.
            var earthPosition = viewer.scene.pickPosition(event.position);
            // `earthPosition` will be undefined if our mouse is not over the globe.
            if (Cesium.defined(earthPosition)) {
                if (activeShapePoints.length === 0) {
                    floatingPoint = createPoint(earthPosition);
                    activeShapePoints.push(earthPosition);
                    var dynamicPositions = new Cesium.CallbackProperty(function () {
                        if (drawingMode === "polygon") {
                            return new Cesium.PolygonHierarchy(activeShapePoints);
                        }
                        return activeShapePoints;
                    }, false);
                    activeShape = drawShape(dynamicPositions);
                }
                activeShapePoints.push(earthPosition);
                createPoint(earthPosition);
            }
        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

        handler.setInputAction(function (event) {
            if (Cesium.defined(floatingPoint)) {
                var newPosition = viewer.scene.pickPosition(event.endPosition);
                if (Cesium.defined(newPosition)) {
                    floatingPoint.position.setValue(newPosition);
                    activeShapePoints.pop();
                    activeShapePoints.push(newPosition);
                }
            }
        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);
        // Redraw the shape so it's not dynamic and remove the dynamic shape.
        function terminateShape() {
            activeShapePoints.pop();
            drawShape(activeShapePoints);
            viewer.entities.remove(floatingPoint);
            viewer.entities.remove(activeShape);
            floatingPoint = undefined;
            activeShape = undefined;
            activeShapePoints = [];
        }
        handler.setInputAction(function (event) {
            terminateShape();
        }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);

        // Zoom in to an area with mountains
        viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);
        var bounds = "<%= bounds %>";
        var center = "<%= center %>";
        let split_lat_lng = center.split(',');
        let lat = split_lat_lng[1];
        let lng = split_lat_lng[0];
        var headingAngle = Cesium.Math.toRadians(20.0);
        var pitchAngle = Cesium.Math.toRadians(-45.0);
        // viewer.camera.lookAt(
        //     Cesium.Cartesian3.fromDegrees(lng, lat, 1500.0),
        //     new Cesium.Cartesian3(1000.0, 1000.0, 2000.0)
        // );
        viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(lng, lat, 5000.0),
            orientation: {
                heading: headingAngle,
                pitch: pitchAngle,
                roll: 0.0
            }
        });
    </script>
</body>

</html>